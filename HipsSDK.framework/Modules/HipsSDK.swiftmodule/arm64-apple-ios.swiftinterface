// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HipsSDK
import CommonCrypto
import CoreData
import CryptoKit
import CryptoTokenKit
import ExternalAccessory
import Foundation
@_exported import HipsSDK
import OSLog
import Swift
import UIKit
extension Array {
  public var isNotEmpty: Swift.Bool {
    get
  }
}
extension String {
  public var toDigitsCode: Swift.String {
    get
  }
}
extension String {
  public var toCurrencyCode: Swift.String {
    get
  }
}
extension Data {
  public func sha256() -> Swift.String
  public func hexEncodedString() -> Swift.String
  public init?(hex: Swift.String)
}
public class HipsNonPaymentRequest : Swift.Codable {
  public init(with: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum HipsTipType : Swift.String, Swift.Codable {
  case none, top, topCent, ask, askCent
  public static func toList() -> [HipsSDK.HipsTipType]
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HipsTransactionType : Swift.String, Swift.Codable {
  case purchase
  case authorization_check
  case pre_authorization
  public static func toList() -> [HipsSDK.HipsTransactionType]
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol HipsUpdateFlowDelegate {
  func updateFlowFinished(_ serial: Swift.String, _ success: Swift.Bool)
}
public protocol HipsPaymentFlowDelegate {
  func paymentFlowFinished(_ result: HipsSDK.HipsTransactionResult)
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class HipsSDK {
  public static func deviceSettings() -> UIKit.UIViewController?
  public static func activate(_ parent: UIKit.UIViewController) -> Swift.Bool
  public static func update(_ parent: UIKit.UIViewController) -> Swift.Bool
  public static func capture(_ parent: UIKit.UIViewController, request: HipsSDK.HipsCaptureRequest, completion: @escaping (HipsSDK.HipsTransactionResult?) -> Swift.Void)
  public static func refund(_ parent: UIKit.UIViewController, _ request: HipsSDK.HipsRefundRequest, completion: @escaping (HipsSDK.HipsTransactionResult?) -> Swift.Void)
  public static func pay(_ parent: UIKit.UIViewController, payment: HipsSDK.HipsPaymentRequest) -> Swift.Bool
  public static func offlineUpload(_ vc: UIKit.UIViewController, completion: @escaping (HipsSDK.HipsOfflineTransactionResult?) -> ())
  public static func loyalty(_ parent: UIKit.UIViewController, transaction: HipsSDK.HipsNonPaymentRequest, requestCode: Swift.Int, completion: @escaping (HipsSDK.HipsNonPaymentMagSwipeResult?) -> Swift.Void)
  @objc deinit
}
public struct HipsNonPaymentMagSwipeResult : Swift.Codable {
  public var createdAt: Swift.String?
  public var errorCode: HipsSDK.HipsDeclineErrorCode?
  public var errorMessage: Swift.String?
  public var sdkCode: Swift.Int?
  public var softwareVersion: Swift.String?
  public var track1: Swift.String?
  public var track2: Swift.String?
  public var track3: Swift.String?
  public func description() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class HipsOfflineTransactionResult : Swift.Codable {
  public var accepted: [Swift.String]
  public var rejected: [Swift.String]
  public var acceptedCount: Swift.Int
  public var rejectedCount: Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum HipsDeclineErrorCode : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case NOT_DECLINED
  case INSUFFICIENT_FUNDS
  case DECLINED
  case NO_3DS_AUTHORIZATION
  case POTENTIAL_FRAUD
  case TECHNICAL_ERROR
  case MERCHANT_SETUP
  case TIMEOUT
  case CARD_LOST
  case ABANDONED
  case ORDER_OVERPAYMENT
  case INVALID_AMOUNT
  case INVALID_CARD
  case INVALID_TEST_CARD
  case CARD_EXPIRED
  case CREDIT_CARD_RESTRICTED
  case RESTRICTED_CARD
  case INVALID_CVV
  case NON_EU_CARD_RESTRICTED
  case TEST_MODE_REQUIRED
  case MERCHANT_BALANCE_TOO_LOW
  case SHIPPING_VALIDATION
  case COMMUNICATION_ERROR
  case UNEXPECTED_ERROR
  case INCORRECT_PIN
  case DUPLICATED
  case INVALID_TRANSACTION
  case MERCHANT_NOT_ON_FILE
  case NO_REFERENCING_TRANSACTION
  case NOT_PERMITTED_TO_TERMINAL
  case PIN_ENTRY_EXCEEDED
  case EXCEEDS_LIMITS
  case REJECTED_BY_USER
  case RECURRING_CONTRACT_INACTIVE
  case RECURRING_CONTRACT_FINALIZED
  case RECURRING_SOURCE_INVALID
  case RECURRING_RETRIES_EXCEEDED
  case RECURRING_EXPIRED
  case API_CONNECTION_ERROR
  case API_ERROR
  case AUTHENTICATION_ERROR
  case CARD_ERROR
  case INVALID_REQUEST
  case RATE_LIMIT
  case RESTRICTED
  case RKI_ERROR
  case CARD_NOT_SUPPORTED
  case CURRENCY_NOT_SUPPORTED
  case DO_NOT_HONOR
  case FRAUDULENT
  case CUSTOMER_NOT_ACCEPTED
  case CUSTOMER_BLACKLISTED
  case UNPAID_BILLS
  case CUSTOMER_NOT_18
  case NO_SUCH_PERSON
  case SCA_STEP_UP_REQUIRED
  case SCA_SECOND_TAP_REQUIRED
  case DEFAULT_TERMINAL_NOT_FOUND_ERROR
  case BLUETOOTH_DISABLED
  case CANCELLED_BY_USER
  case TERMINAL_COMMUNICATION_ERROR
  case PARTIAL_REFUND_ERROR
  case NETWORK_ERROR
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [HipsSDK.HipsDeclineErrorCode]
  public typealias RawValue = Swift.Int
  public static var allCases: [HipsSDK.HipsDeclineErrorCode] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class HipsPaymentRequest : Swift.Codable {
  public init(amountInCents: Swift.Int, vatInCents: Swift.Int, cashbackInCents: Swift.Int, reference: Swift.String, employeeNumber: Swift.String? = nil, cashierToken: Swift.String? = nil, metadata1: Swift.String? = nil, metadata2: Swift.String? = nil, webHook: Swift.String? = nil, currencyISO: Swift.String, tipFlowType: HipsSDK.HipsTipType, transactionType: HipsSDK.HipsTransactionType, isOfflinePayment: Swift.Bool = false, isTestMode: Swift.Bool = true)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class HipsRefundRequest : Swift.Codable {
  public var amountInCents: Swift.Int?
  public var transactionId: Swift.String
  public var isTestMode: Swift.Bool
  public init(amountInCents: Swift.Int, transactionId: Swift.String, isTest: Swift.Bool)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class HipsCaptureRequest : Swift.Codable {
  public var amountInCents: Swift.Int
  public var transactionId: Swift.String
  public var isTestMode: Swift.Bool
  public init(amountInCents: Swift.Int, transactionId: Swift.String, isTest: Swift.Bool)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct HipsTransactionResult : Swift.Codable {
  public var aid: Swift.String?
  public var amountCashback: Swift.Int?
  public var amountCurrencyCode: Swift.String?
  public var amountGratuity: Swift.Int?
  public var amountTransaction: Swift.Int?
  public var authorizationCode: Swift.String?
  public var authorizationMethod: Swift.String?
  public var cardFingerprint: Swift.String?
  public var createdAt: Swift.String?
  public var errorCode: Swift.Int?
  public var errorMessage: Swift.String?
  public var merchantAddressLine1: Swift.String?
  public var merchantAddressLine2: Swift.String?
  public var merchantCity: Swift.String?
  public var merchantCompanyNumber: Swift.String?
  public var merchantCountry: Swift.String?
  public var merchantId: Swift.String?
  public var merchantLatitude: Swift.Double?
  public var merchantLongitude: Swift.Double?
  public var merchantName: Swift.String?
  public var merchantPhone: Swift.String?
  public var merchantRegion: Swift.String?
  public var merchantTaxVatNumber: Swift.String?
  public var receiptData: Swift.String?
  public var receiptInfo: Swift.String?
  public var requiresParameterDownload: Swift.Bool?
  public var requiresTransactionUpload: Swift.Bool?
  public var responder: Swift.String?
  public var softwareVersion: Swift.String?
  public var source: Swift.String?
  public var sourceAccountMasked: Swift.String?
  public var sourceApplicationName: Swift.String?
  public var sourceMethod: Swift.String?
  public var sourceName: Swift.String?
  public var sourceScheme: Swift.String?
  public var statusCode: Swift.String?
  public var taxVat: Swift.Int?
  public var terminalID: Swift.String?
  public var test: Swift.Bool?
  public var transactionApproved: Swift.Bool?
  public var transactionID: Swift.String?
  public var transactionShortId: Swift.String?
  public var transactionStatus: Swift.String?
  public var transactionType: Swift.String?
  public var tsi: Swift.String?
  public var tvr: Swift.String?
  public var verificationMethod: Swift.String?
  public func description() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum VerificationMethod : Swift.String {
  case NONE
  case PIN
  case SIGNATURE
  case CRYPTOGRAM
  case BIOMETRIC
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionStatus : Swift.String {
  case SUCCESSFUL
  case FAILED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthorizationMethod : Swift.String {
  case ONLINE
  case OFFLINE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SourceMethod : Swift.String {
  case PURCHASE
  case PURCHASE_OFFLINE
  case PRE_AUTHORIZATION
  case REFUND
  case REFUND_OFFLINE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SourceScheme : Swift.String {
  case VISA
  case MASTERCARD
  case MAESTRO
  case AMEX
  case UNIONPAY
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension HipsSDK.HipsTipType : Swift.Equatable {}
extension HipsSDK.HipsTipType : Swift.Hashable {}
extension HipsSDK.HipsTipType : Swift.RawRepresentable {}
extension HipsSDK.HipsTransactionType : Swift.Equatable {}
extension HipsSDK.HipsTransactionType : Swift.Hashable {}
extension HipsSDK.HipsTransactionType : Swift.RawRepresentable {}
extension HipsSDK.HipsDeclineErrorCode : Swift.Equatable {}
extension HipsSDK.HipsDeclineErrorCode : Swift.Hashable {}
extension HipsSDK.HipsDeclineErrorCode : Swift.RawRepresentable {}
extension HipsSDK.VerificationMethod : Swift.Equatable {}
extension HipsSDK.VerificationMethod : Swift.Hashable {}
extension HipsSDK.VerificationMethod : Swift.RawRepresentable {}
extension HipsSDK.TransactionStatus : Swift.Equatable {}
extension HipsSDK.TransactionStatus : Swift.Hashable {}
extension HipsSDK.TransactionStatus : Swift.RawRepresentable {}
extension HipsSDK.AuthorizationMethod : Swift.Equatable {}
extension HipsSDK.AuthorizationMethod : Swift.Hashable {}
extension HipsSDK.AuthorizationMethod : Swift.RawRepresentable {}
extension HipsSDK.SourceMethod : Swift.Equatable {}
extension HipsSDK.SourceMethod : Swift.Hashable {}
extension HipsSDK.SourceMethod : Swift.RawRepresentable {}
extension HipsSDK.SourceScheme : Swift.Equatable {}
extension HipsSDK.SourceScheme : Swift.Hashable {}
extension HipsSDK.SourceScheme : Swift.RawRepresentable {}
